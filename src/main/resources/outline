量变引起质变:在挖掘专利信息的过程中，当我们发现专利数量累积到一定数量时，它所反应出的信息已经远不止于专利本身，专利拥有者的信息、整个行业的信息逐渐成为我们挖掘的方向，同时也成为了客户关注的焦点。正所谓知己知彼，百战不殆，我们现在不仅要提供“知己”的产品也要提供“知彼”的服务。
选取了目前库中专利数量最多的前20个公司，采用我们的竞争对手选择算法及力导向的布局算法，行业领域划分十分清晰；竞争对手、行业标杆一目了然；后续我们还可以添加更多的功能，比如允许用户编辑具体的节点，手动添加或者删除节点。
对于用户关注的某一个特定的公司，查看详情能得到以它为出发点更为完善的竞争对手层级关系，目前我们查询了两层的竞争对手，以辐射图布点算法展现，辐射图的算法会精确计算两个点的最近关系。
在programmableweb中，我们找到了Freebase的API接口，传入公司名后进行查询，会得到公司的详细，目前我们选择了公司网站、别名、描述等信息作为展现。
技术架构：我们对所提供的120万的数据都做了索引（存入solr，不排除部分脏数据)，将Freebase的数据通过Hadoop处理后存入我们的Mongo。service层使用Java处理、计算和生成业务逻辑数据，通过spring向web层提供Restful的访问接口。前台我们采用了Jit做数据可视化处理，同时使用了Bootstrap做了UI。
数据结构的说明：一般的，我们将批量的数据结构分成两个类型，图(Graph)与树(Tree)。树是一种特殊的图，在图论的定义里，我们可以简单的将树理解成不成环的图。
力导向算法采用了弹簧原理进行迭代，可以很方便的被运用在图数据的展现上，一开始，我们也为专利的引用关系做了力导向图的设计。（具体的迭代效果需要参数调优）
树形数据的思路起源于对于非实时数据的计算展现优化。由于solr的效率并不是很高，我们再做大规模查询时会对其产生巨大的压力，造成计算耗时严重，于是我们考虑将非实时性数据缓存下来，对于哪些数据缓存，我们选择了前500强与所有购买我们产品的用户，同时我们需要动态的能够添加和查看当前已缓存的公司列表，辐射图自然成了最好的选择。
